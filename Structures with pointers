 Stack memory allocation--
 1) Named allocation
 2) Limitations 
 ex- int a[10];
 
 Heap memory allocation--
 1) unnamed allocation
 2) no limitations in memory usage 
 ex- int * p= new int [10]; //c++
 ex- int *p =(int*)malloc(sizeof(int)*10);//c
 
 Structures and unions
  Structure
  
  struct item
{
    int x;
    float y;
    char ch;
};

int main( )
{
    struct item it;
    it.x = 12;
    it.y = 20.2;
    it.ch = 'a';
    
    printf("%d\n", it.x);
    printf("%f\n", it.y);
    printf("%c\n", it.ch);
    
    return 0;
}
OUTPUT----
12
20.2
a
------------------------------------------------------------------------------
 
 Union
 
 union item
{
    int x;
    float y;
    char ch;
};

int main( )
{
    union item it;
    it.x = 12;
    it.y = 20.2;
    it.ch = 'a';
    
    printf("%d\n", it.x);
    printf("%f\n", it.y);
    printf("%c\n", it.ch);
    
    return 0;
}

Output:

1101109601
20.199892
a 
In the above program, you can see that the values of x and y gets corrupted. 
Only variable ch prints the expected result. It is because, in union,the memory location is shared among all member data types.
Therefore, the only data member whose value is currently stored, will occupy memory space. The value of the variable ch was stored at last, so the value of the rest of the variables is lost. 
-------------------------------------------------------------------------------------------
Some Questions Related to sizeof structures---
1)➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼
struct a
{
int a;
}x;
sizeof(x);

ans-4

2)➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼
struct a
{
char a;
}x;
sizeof(x);

ans-1
3)➼➼➼➼➼➼➼➼➼➼➼➼➼➼➼
struct a
{
int a;
char b;
}x;
sizeof(x);

ans-8

EXPLANATION--- size will be allocated in a multiple of maximum data type size--
here int is max(4) so two 4 bytes 4 bytes memory will be allocated = 4+4 =8 bytes
IMPORTANT ➼➼➼➼➼ ORDER of declaration is important

Example -1                               
struct a                                  
{
char a;
int b;
int c; 
}x;
sizeof(x);

ans-16
Example -2

struct b{ 
char a
char b;
int c;
}x;
sizeof(x);
ans-8

--------------------------------
structure with pointers--
struct a{
char *a;
}x;
sizeof(x);
ans=4;
size of pointer is  fix 4 ---- whaterver value type of pointer is (either it is int* ,char*, double*) .. but size of pointer is 4 ....









